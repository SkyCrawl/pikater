/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DataInputDialog.java
 *
 * Created on May 21, 2011, 10:18:44 PM
 */

package pikater.gui.java.improved;

import jade.gui.GuiAgent;
import jade.gui.GuiEvent;
import jade.util.leap.ArrayList;
import jade.util.leap.List;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import pikater.gui.java.improved.DataInstancesTableModel;
import pikater.gui.java.improved.GuiConstants;
import pikater.gui.java.improved.ResultsBrowserFrame;
import pikater.ontology.messages.Agent;
import pikater.ontology.messages.Data;
import pikater.ontology.messages.DataInstances;
import pikater.ontology.messages.Execute;
import pikater.ontology.messages.Task;

/**
 *
 * @author martin
 */
public class DataInputFrame extends javax.swing.JFrame {

    DataInstancesTableModel sampleModel;
    DataInstancesTableModel model;
    DataInstances sampleInstances;
    GuiAgent myAgent;
    ResultsBrowserFrame rbf;
    byte[] object;

    /** Creates new form DataInputDialog */
    public DataInputFrame(ResultsBrowserFrame rbf, DataInstances sampleInstances, GuiAgent myAgent, byte[] object) {
        super("");
        this.rbf = rbf;
        initComponents();

        this.myAgent = myAgent;
        this.sampleInstances = sampleInstances;
        this.object = object;

        DataInstances myData = new DataInstances();
        myData.setAttributes(sampleInstances.getAttributes());
        myData.setClass_index(sampleInstances.getClass_index());
        myData.setName(sampleInstances.getName());
        myData.setInstances(new ArrayList());

        model = new DataInstancesTableModel(myData);
        sampleModel = new DataInstancesTableModel(sampleInstances);

        jTable1.setModel(model);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        loadCSVButton = new javax.swing.JButton();
        saveCSVButton = new javax.swing.JButton();
        addRowButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");

        loadCSVButton.setText("Load data");
        loadCSVButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCSVButtonActionPerformed(evt);
            }
        });

        saveCSVButton.setText("Save CSV");

        addRowButton.setText("Add row");
        addRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveCSVButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadCSVButton)
                        .addGap(18, 18, 18)
                        .addComponent(addRowButton, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, loadCSVButton, okButton, saveCSVButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton)
                    .addComponent(saveCSVButton)
                    .addComponent(loadCSVButton)
                    .addComponent(addRowButton))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowButtonActionPerformed
        model.addNewInstance();
    }//GEN-LAST:event_addRowButtonActionPerformed

    public String getArffData() {
        String fileName = "tempLabelFile";
        String arffHeader = "";
        arffHeader += "@RELATION " + fileName + "\n";

        for (int i = 0; i < model.getColumnCount() - 1; i++) {
            arffHeader += "@ATTRIBUTE " + model.getColumnName(i) + " NUMERIC\n";
        }

        String[] classes = sampleModel.getClasses();

        String classList = "{";
        for (int i = 0; i < classes.length - 1; i++) {
            classList += classes[i] + ",";
        }

        classList += classes[classes.length - 1] + "}";

        arffHeader += "@ATTRIBUTE " + model.getColumnName(model.getColumnCount() - 1) + " " + classList;

        return arffHeader + "\n@DATA\n" + model.getCSVString();
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        String arffData = getArffData();

        String fileName = "tempLabelFile_" + System.currentTimeMillis();

        GuiEvent ge = new GuiEvent(this, GuiConstants.LABEL_NEW_DATA);
        ge.addParameter(arffData);
        ge.addParameter(fileName);

        //String internalFilename = DataManagerService.translateFilename(myAgent, 0, fileName, null);

        Agent a = new Agent();
        a.setName("agent" + System.currentTimeMillis());

        a.setObject(object);
        a.setGui_id("trained agent");

        Data d = new Data();
        d.setMode("test_only");
        d.setTest_file_name("data" + System.getProperty("file.separator") + "files" + System.getProperty("file.separator") + "temp" + System.getProperty("file.separator") + fileName);
        d.setTrain_file_name("data" + System.getProperty("file.separator")  + "files" + System.getProperty("file.separator") + "temp" + System.getProperty("file.separator") + fileName);
        d.setExternal_test_file_name(fileName);
        d.setExternal_train_file_name(fileName);
        d.setOutput("predictions");

        Task t = new Task();
        t.setAgent(a);
        t.setData(d);

        t.setId("pokusny task pro pokusneho oziveneho agenta");
        t.setComputation_id("neni soucasti zadne computation");
        t.setProblem_id("neni soucasti zadneho problemu");

        Execute ex = new Execute();
        ex.setTask(t);

        ge.addParameter(ex);
        myAgent.postGuiEvent(ge);

    }//GEN-LAST:event_okButtonActionPerformed

    private void loadCSVButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCSVButtonActionPerformed
        JFileChooser openFile = new JFileChooser();

        FileNameExtensionFilter fnf = new FileNameExtensionFilter("Data files", "csv", "arff");
        openFile.setFileFilter(fnf);

        int result = openFile.showOpenDialog(this);

        if (result != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File f = openFile.getSelectedFile();

        String[] nameParts = f.getName().split("\\.");
        String extension = nameParts[nameParts.length - 1];

        String arffData = "";

        if (extension.equals("arff")) {

            try {
                Scanner s = new Scanner(f);
                while (s.hasNextLine()) {
                    arffData += s.nextLine() + "\n";
                }
            } catch (FileNotFoundException fnfe) {
                fnfe.printStackTrace();
            }

        }

        if (extension.equals("csv")) {

            try {
                Scanner s = new Scanner(f);

                String line = s.nextLine();
                while (line.isEmpty()) {
                    line = s.nextLine();
                }


                String[] columns = line.split(",");

                String arffHeader = "";
                arffHeader += "@RELATION " + f.getName() + "\n";

                for (int i = 0; i < columns.length - 1; i++) {
                    arffHeader += "@ATTRIBUTE " + columns[i].trim() + " NUMERIC\n";
                }

                String arffContent = "@DATA\n";
                java.util.ArrayList<String> classes = new java.util.ArrayList<String>();
                while (s.hasNextLine()) {

                    line = s.nextLine();
                    if (line.isEmpty()) {
                        continue;
                    }

                    arffContent += line + "\n";

                    String className = line.split(",")[columns.length - 1];

                    if (!classes.contains(className)) {
                        classes.add(className);
                    }
                }

                String classList = "{";
                for (int i = 0; i < classes.size() - 1; i++) {
                    classList += classes.get(i) + ",";
                }

                classList += classes.get(classes.size() - 1) + "}";

                arffHeader += "@ATTRIBUTE " + columns[columns.length - 1].trim() + " " + classList;

                arffData = arffHeader + "\n" + arffContent;
            } catch (FileNotFoundException fnfe) {
                fnfe.printStackTrace();
            }

        }

        GuiEvent ge = new GuiEvent(this, GuiConstants.IMPORT_TEMP_FILE);
        ge.addParameter(arffData);
        ge.addParameter("tempLabelFile_" + System.currentTimeMillis());
        myAgent.postGuiEvent(ge);

    }//GEN-LAST:event_loadCSVButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        rbf.dataInputDialogClosed();
    }//GEN-LAST:event_formWindowClosing

    public void setDataInstances(DataInstances di) {

        System.err.println("DATAINST" + di);

        if (di.getAttributes() != null)
            if (di.getAttributes().size() != sampleInstances.getAttributes().size()) {
                JOptionPane.showMessageDialog(this, "Incompatible data sets", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        DataInstances myData = new DataInstances();
        myData.setAttributes(sampleInstances.getAttributes());
        myData.setClass_index(sampleInstances.getClass_index());
        myData.setName(sampleInstances.getName());
        myData.setInstances(di.getInstances());

        model = new DataInstancesTableModel(myData);
        jTable1.setModel(model);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton loadCSVButton;
    private javax.swing.JButton okButton;
    private javax.swing.JButton saveCSVButton;
    // End of variables declaration//GEN-END:variables

}
